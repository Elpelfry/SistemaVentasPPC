@page "/facturacion"

<PageTitle>Facturaci&oacute;n</PageTitle>
@rendermode InteractiveWebAssembly
@inject NotificationService notificationService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject IClientService<MetodoPagos> metodosPagosService
@inject IClientService<Productos> productosService
@inject IClientService<Facturaciones> facturacionesService
@inject IClientService<Configuraciones> configuracionesService

<div class="container">
    <RadzenNotification />
    <div class="card shadow-lg" style="background-image: linear-gradient(to top, #30cfd0 0%, #330867 100%);">
        <div class="card-header">
            <h3 class="fw-bold text-center">Facturaci&oacute;n</h3>
        </div>
        <div class="row">
            <div class="col col-6">
                <div class="card shadow-lg">
                    <div class="card-header-sub" style="background: #01204E">
                        <h3 class="fw-bold text-center">Compra</h3>
                    </div>
                    <div class="table-responsive" style="max-height: 320px;">
                        <table class="table table-bordered">
                            <thead style="background: #01204E;" class="text-light">
                                <tr>
                                    <th>Nombre</th>
                                    <th class="text-center">Precio</th>
                                    <th class="text-center">Cantidad</th>
                                    <th class="text-center">ITBIS</th>
                                    <th class="text-center">Remover</th>
                                </tr>
                            </thead>
                            <tbody style="overflow-y: auto;">
                                @foreach (var item in facturacion.FacturacionDetalle)
                                {
                                    var producto = productosVenta.FirstOrDefault(x => x.ProductoId == item.ProductoId);
                                    var precio = (producto!.Precio - (producto!.Precio*(producto.Descuento/100.0f)));
                                    if (producto != null)
                                    {
                                        <tr>
                                            <td>@producto!.Nombre</td>
                                            <td class="text-center">@precio.ToString("N2")</td>
                                            <td class="text-center">@item.Cantidad.ToString("00")</td>
                                            <td class="text-center">@producto.ITBIS.ToString("N2")%</td>
                                            <td class="justify-content-center text-center">
                                                <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick=@(() => RemoverProducto(producto) )></button>
                                            </td>

                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer">
                        <div class="col-auto">
                            <label class="form-label"><strong>Sub-Total:</strong> RD$ @facturacion.SubTotal.ToString("N2")</label><br />
                            <label class="form-label"><strong>ITBIS:</strong> RD$ @facturacion.ITBS.ToString("N2")</label><br />
                            <label class="form-label"><strong>Total:</strong> RD$ @facturacion.Total.ToString("N2")</label>
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-success bi-cash-stack" @onclick="Vender"> Venta</button>
                            <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="NuevaVenta"> Cancelar</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col col-6 justify-content-end">
                <div class="card shadow-lg">
                    <div class="card-header-sub" style="background: #01204E">
                        <h3 class="fw-bold text-center">Productos</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <label>Buscar:</label>
                            <div class="col-3">
                                <InputSelect @bind-Value="Opcion" class="form-select">
                                    <option value="1">C&oacute;digo</option>
                                    <option value="2">Nombre</option>
                                    <option value="3">Todo</option>
                                </InputSelect>
                            </div>
                            <div class="col-auto">
                                @switch (Opcion)
                                {
                                    case 1:
                                        <div class="input-group justify-content-end">
                                            <InputText @bind-Value="producto.Codigo" class="form-control" min="0"></InputText>
                                            <div class="input-group-append">
                                                <button class="btn btn-dark bi bi-search" @onclick="Buscar"></button>
                                            </div>
                                        </div>
                                        break;
                                    case 2:
                                        <div class="input-group justify-content-end">
                                            <InputText @bind-Value="producto.Nombre" class="form-control"></InputText>
                                            <div class="input-group-append">
                                                <button class="btn btn-dark bi bi-search" @onclick="Buscar"></button>
                                            </div>
                                        </div>
                                        break;

                                    case 3:
                                        <div class="input-group justify-content-end">
                                            <button class="btn btn-dark bg bi-search" @onclick="Buscar">
                                            </button>
                                        </div>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive" style="max-height: 450px;">
                        <table class="table table-bordered text-center">
                            <thead style="background: #01204E" class="text-light">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>ITBIS</th>
                                    <th>Descuento</th>
                                    <th>Agregar</th>
                                </tr>
                            </thead>
                            <tbody style="overflow-y:auto;">
                                @foreach (var item in productos)
                                {
                                    var producto = productos.FirstOrDefault(x => x.ProductoId == item.ProductoId);
                                    <tr>
                                        <td style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@item.Nombre</td>
                                        <td>@item.Precio.ToString("N2")</td>
                                        <td>
                                            <div class="input-group text-center">
                                                <button type="button" class="btn btn-success bi bi-dash" @onclick=@(() => DisminuirCantidad(item))></button>
                                                <label class="form-control text-center" readonly>@item.Cantidad.ToString("00")</label>
                                                <button type="button" class="btn btn-success bi bi-plus" @onclick=@(() => AumentarCantidad(item))></button>
                                            </div>
                                        </td>
                                        @if (@item.ITBIS == 0)
                                        {

                                            <td>@item.ITBIS%</td>
                                        }
                                        else
                                        {
                                            <td>@item.ITBIS.ToString("D2")%</td>
                                        }
                                        @if (@item.Descuento == 0)
                                        {

                                            <td>@item.Descuento%</td>
                                        }
                                        else
                                        {
                                            <td>@item.Descuento.ToString("D2")%</td>
                                        }
                                        <td class="justify-content-center">
                                            <button type="button" class="btn btn-muted text-white" @onclick=@(() => AgregarProducto(item!)) style="background:#2ca4f2">
                                                <i class="bi bi-plus "></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (vender)
{
    <div class="modal d-block opaco">
        <RadzenNotification />
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header" style="background:#01204E ">
                    <h5 class="modal-title fw-bold text-white"> Venta</h5>
                    <button type="button" class="btn bg-danger text-white" @onclick="CerrarVenta">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">

                        <div class="col-12">
                            <label class="fw-bold">Nombre de Cliente:</label>
                            <InputText @bind-Value="facturacion.NombreCliente" class="form-control"></InputText>
                        </div>

                        <div class="col-12">
                            <label class="fw-bold">Metodo de Pago:</label>
                            <InputSelect @bind-Value="facturacion.MetodoPagoId" class="form-select">
                                @foreach (var item in metodosPagos)
                                {
                                    <option value="@item.MetodoPagoId">@item.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        @if (facturacion.MetodoPagoId == 2)
                        {
                           
                             facturacion.Recibido = facturacion.Total;
                            
                            <EditForm Model="input" OnValidSubmit="RealizarVenta">
                                <DataAnnotationsValidator />
                                <div class="col-12">
                                    <label class="fw-bold">Numero de Tarjeta:</label>
                                    <div class="input-group">
                                        <InputText @bind-Value="input.NumeroTarjeta" class="form-control">
                                        </InputText>
                                        <div class="input-group-append">
                                            <span class="input-group-text">
                                                <img src="/bootstrap/img/mastercard.svg" class="img-fluid" alt="Mastercard Logo" style="width: 25px; height: 25px;">
                                                <img src="/bootstrap/img/visa.svg" class="img-fluid" alt="Visa Logo" style="width: 25px; height: 25px;">
                                                <img src="/bootstrap/img/amex.svg" class="img-fluid" alt="Visa Logo" style="width: 25px; height: 25px;">
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => input.NumeroTarjeta)" class="alert alert-danger" />
                                <div class="col-12">
                                    <div class="row">
                                        <div class="col-6">
                                            <label class="fw-bold">Numero de Seguridad:</label>
                                            <div class="input-group">
                                                <InputText @bind-Value="input.NumeroSeguridad" class="form-control"></InputText>
                                                <div class="input-group-append">
                                                    <span class="input-group-text">
                                                        <img src="/bootstrap/img/cvv_card.svg" class="img-fluid" alt="Mastercard Logo" style="width: 25px; height: 25px;">
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <label class="fw-bold">Fecha de Expiraci&oacute;n:</label>
                                            <InputDate @bind-Value="input.FechaExpiracion" class="form-control"></InputDate>
                                        </div>
                                        <ValidationMessage For="@(() => input.NumeroSeguridad)" class="alert alert-danger" />
                                        @if (input.FechaExpiracion <= DateTime.Now)
                                        {
                                            var validationMessage = ValidateFechaExpiracion(input.FechaExpiracion);
                                            if (validationMessage != null)
                                            {
                                                <div class="alert alert-info" role="alert">@validationMessage</div>
                                            }
                                        }
                                    </div>
                                </div>


                                <div class="col-12">
                                    <label class="fw-bold">Recibido</label>
                                    <label class="form-control" readonly>@facturacion.Recibido.ToString("N2")</label>
                                </div>

                                <div class="input-group">
                                    <div class="col-12">
                                        <label class="form-label"><strong>Sub-Total:</strong></label>
                                        <label class="form-control">RD$ @facturacion.SubTotal.ToString("N2")</label>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label"><strong>ITBIS:</strong></label>
                                        <label class="form-control">RD$ @facturacion.ITBS.ToString("N2")</label>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label"><strong>Total:</strong></label>
                                        <label class="form-control">RD$ @facturacion.Total.ToString("N2")</label>
                                    </div>
                                </div>
                                <div class="modal-footer col col-12">
                                    <button type="submit" class="btn btn-success">Realizar Venta</button>
                                </div>
                            </EditForm>
                        }
                        else if (facturacion.MetodoPagoId == 1)
                        {
                            <EditForm Model="facturacion.Recibido" OnValidSubmit="RealizarVenta">
                                <div class="col-12">
                                    <DataAnnotationsValidator />
                                    <label class="fw-bold">Recibido:</label>
                                    <InputNumber @bind-Value="facturacion.Recibido" class="form-control" min="0" onchange="this.blur()"></InputNumber>
                                </div>
                                <div class="input-group">
                                    <div class="col-12">
                                        <label class="form-label"><strong>Sub-Total:</strong></label>
                                        <label class="form-control">RD$ @facturacion.SubTotal.ToString("N2")</label>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label"><strong>ITBIS:</strong></label>
                                        <label class="form-control">RD$ @facturacion.ITBS.ToString("N2")</label>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label"><strong>Total:</strong></label>
                                        <label class="form-control">RD$ @facturacion.Total.ToString("N2")</label>
                                    </div>
                                </div>
                                <div class="modal-footer col col-12">
                                    <button type="submit" class="btn btn-success">Realizar Venta</button>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (factura)
{
    <div class="modal d-block opaco">
        <RadzenNotification />
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header" style="background:#01204E ">
                    <h5 class="modal-title fw-bold text-white"> Factura</h5>
                    <div class="justify-content-end d-flex">
                        <button type="button" class="btn bg-muted text-white" style="background: #ffe085" @onclick="ImprimirFactura">
                            <img style="width: 15px; height: 15px;" src="/printer.svg" />
                        </button>
                        <button type="button" class="btn bg-danger text-white" @onclick="CerrarFactura">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                </div>

                <div id="factura" class="modal-body" style=" height: 40rem; overflow-y: auto; overflow-x: hidden;">

                    <div class="position-relative modalContenedor">
                        @if (facturacion.Eliminada)
                        {
                            <div class="letreroEliminar position-absolute top-50 start-50 translate-middle" style="transform: translate(-50%, -50%); z-index: 9999;">
                                <img src="/bootstrap/img/returned.png">
                            </div>
                        }

                        <div class="row d-flex align-items-center justify-content-center">
                            <div id="logoEmpresa" class="text-center">
                                <img style="width: 150px; height: 120px; border-radius: 10%;" src="@getLogo()" />
                            </div>
                            <h4 class="fw-bold fs-4 text-center" style="margin-top: -8px; justify-content: center; text-align: center;">@configuracion.NombreEmpresa</h4>

                            <div class="row" style="margin-top: -12px; justify-content: center; text-align: center;">
                                <div class="col-6 text-start">
                                    <label class="fw-bold"> <i class="fas fa-phone"></i> Telf.: <span class="fw-normal">@configuracion.Telefono</span></label>
                                </div>
                                <div class="col-6 text-end">
                                    <label class="fw-bold"> <i class="fas fa-building"></i> RNC: <span class="fw-normal">@configuracion.NFC</span></label>
                                </div>
                            </div>

                            <div id="direccionEmpresa" class="fw-bold text-center">
                                <label> <i class="fas fa-map-marker"></i> Dirc.: <span class="fw-normal">@configuracion.Direccion</span></label>
                            </div>
                        </div>

                        <hr>
                        <h5 class="fw-bold text-center titular" style="font-size: 14px; font-weight: bold;">DATOS DE LA VENTA</h5>
                        <hr>

                        <div class="row">
                            <div class="col text-start">
                                <label class="fw-bold" style="font-size: 12px;">Fecha:<span class="fw-normal"> @facturacion.Fecha.ToString("dd/MM/yyyy")</span></label>
                            </div>
                            <div id="fechaFactura" class="col text-end">
                                <label class="fw-bold" style="font-size: 12px;">Hora: <span class="fw-normal"> @facturacion.Fecha.ToString("h:mm tt")</span></label>
                            </div>
                            <div class="text-start">
                                <label class="fw-bold" style="font-size: 12px;">N°: <span class="fw-normal"> @facturacion.FacturacionId</span></label>
                            </div>
                            <div class="text-start">
                                @if (true)
                                {
                                    var met = metodosPagos.FirstOrDefault(x => x.MetodoPagoId == facturacion.MetodoPagoId);
                                    <label class="fw-bold" style="font-size: 12px;">M&eacute;todo Pago: <span class="fw-normal">@met!.Nombre</span></label>
                                }
                            </div>
                            <div class="text-start">
                                <label class="fw-bold" style="font-size: 12px;">Cliente: <span class="fw-normal">@facturacion.NombreCliente</span></label>
                            </div>
                        </div>

                        <hr>
                        <h5 class="fw-bold text-center titular" style="font-size: 14px; font-weight: bold;">PRODUCTOS</h5>
                        <hr>

                        <div class="row mb-4">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Descripci&oacute;n</th>
                                        <th class="text-end derecha">Itbis</th>
                                        <th class="text-end derecha">Importe</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in facturacion.FacturacionDetalle)
                                    {
                                        var pro = productosVenta.FirstOrDefault(x => x.ProductoId == item.ProductoId);
                                        double subtotal = item.Cantidad * pro!.Precio;
                                        double total = subtotal - (subtotal * (pro.Descuento / 100.0f));
                                        double itbisFinal = total * (pro.ITBIS / 100.0f);
                                        var precio = (pro!.Precio - (pro!.Precio * (pro.Descuento / 100.0f)));
                                        <tr>
                                            <td>
                                                <div class="row">
                                                    <span>* @pro.Nombre</span>
                                                </div>
                                                <div class="row mb-3">
                                                    <span>(@item.Cantidad x @precio.ToString("N2"))</span>
                                                </div>
                                            </td>
                                            <td class="text-end derecha">@itbisFinal.ToString("N2")</td>
                                            <td class="text-end derecha">@total.ToString("N2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div style="margin-right: 10px">
                            <div class="row mb-5" style="text-align: end">
                                <div>
                                    <label class="fw-bold">SubTotal:</label>
                                    <span>RD$ @facturacion.SubTotal.ToString("N2")</span>
                                </div>
                                <div>
                                    <label class="fw-bold">ITBIS:</label>
                                    <span>RD$ @facturacion.ITBS.ToString("N2")</span>
                                </div>
                                <div class="mb-4">
                                    <label class="fw-bold">Total:</label>
                                    <span>RD$ @facturacion.Total.ToString("N2")</span>
                                </div>

                                <div class="datoInferior">
                                    <div>
                                        <label class="fw-bold">Recibido:</label>
                                        <span>RD$ @facturacion.Recibido.ToString("N2")</span>
                                    </div>
                                    @if (facturacion.CondicionId == 2)
                                    {
                                        double deuda = facturacion.Total - facturacion.Recibido;
                                        <div>
                                            <label class="fw-bold">Pendiente:</label>
                                            <span>RD$ @deuda.ToString("N2")</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div>
                                            <label class="fw-bold">Cambio:</label>
                                            <span>RD$ @facturacion.Devuelta.ToString("N2")</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="row text-center centrado datoInferior">
                            <label class="fw-bold">@configuracion.Nota</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}




@code {
    public int Opcion { get; set; } = 1;
    private bool factura = false;
    public bool vender { get; set; } = false;
    public List<Productos> productos { get; set; } = new List<Productos>();
    public List<Productos> productosVenta { get; set; } = new List<Productos>();
    public Facturaciones facturacion { get; set; } = new Facturaciones();
    public Productos producto { get; set; } = new Productos();
    private Input input { get; set; } = new();
    public List<MetodoPagos> metodosPagos { get; set; } = new List<MetodoPagos>();
    public Configuraciones configuracion { get; set; } = new Configuraciones();


    private sealed class Input
    {
        [Required(ErrorMessage = "El número de la tarjeta es requerido")]
        [RegularExpression(@"^[0-9]{16}$", ErrorMessage = "El número de tarjeta debe tener 16 dígitos")]
        [Display(Name = "Numero de la Tarjeta")]
        public string? NumeroTarjeta { get; set; }

        [Required(ErrorMessage = "El número de seguridad es requerido")]
        [RegularExpression(@"^[0-9]+$", ErrorMessage = "El número de seguridad solo puede contener dígitos")]
        [StringLength(4, MinimumLength = 3, ErrorMessage = "El número de seguridad debe tener entre 3 y 4 dígitos")]
        [Display(Name = "Numero de Seguridad")]
        public string? NumeroSeguridad { get; set; }

        [Required(ErrorMessage = "Es requerido")]
        [Display(Name = "Fecha de Expiración")]
        public DateTime FechaExpiracion { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        metodosPagos = await metodosPagosService.GetAllObject();
        var auxproductos = await productosService.GetAllObject();
        productos = await productosService.GetAllObject();
        productosVenta = await productosService.GetAllObject();
        productos.ForEach(item => item.Cantidad = 1);
        var conf = await configuracionesService.GetAllObject();
        configuracion = conf.FirstOrDefault()!;
        facturacion.Fecha = DateTime.Now;
        input.FechaExpiracion = DateTime.Now;
        facturacion.ConfiguracionId = configuracion.ConfiguracionId;

    }

    public async Task Buscar()
    {
        switch (Opcion)
        {
            case 1:
                var auxproductos = await productosService.GetAllObject();
                productos = auxproductos.Where(p => p.Codigo == producto.Codigo && p.Cantidad != 0).ToList();
                productos.ForEach(item => item.Cantidad = 1);
                break;
            case 2:
                var auxproductos2 = await productosService.GetAllObject();
                productos = auxproductos2.Where(p => p.Nombre!.ToLower().Contains(producto.Nombre!.ToLower()) && p.Cantidad != 0).ToList();
                productos.ForEach(item => item.Cantidad = 1);
                break;
            case 3:
                var auxproductos3 = await productosService.GetAllObject();
                productos = auxproductos3.Where(p => true && p.Cantidad != 0).ToList();
                productos.ForEach(item => item.Cantidad = 1);
                break;
        }
    }

    public void Vender()
    {
        if (facturacion.FacturacionDetalle.Any())
        {
            vender = true;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No hay productos en la venta",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
        }
    }

    public async Task AgregarProducto(Productos prod)
    {
        var detalle = facturacion.FacturacionDetalle.FirstOrDefault(x => x.ProductoId == prod.ProductoId);
        var producto = await productosService.GetObject(prod.ProductoId);

        if (detalle != null && (detalle.Cantidad + prod.Cantidad) > producto!.Cantidad)
        {
            productoNoDisponibleNotification();
            prod.Cantidad = 1;
            return;
        }

        if (producto != null && producto.Cantidad >= prod.Cantidad)
        {
            double precioConDescuento = producto.Precio * prod.Cantidad * (1 - producto.Descuento / 100.0f);
            double itebis = precioConDescuento * (producto.ITBIS / 100.0f);

            actualizarVenta(precioConDescuento, itebis, prod.Cantidad, producto.ProductoId);
            prod.Cantidad = 1;
            return;
        }
        prod.Cantidad = 1;
        productoNoDisponibleNotification();
    }

    void actualizarVenta(double precio, double itebis, int cantidad, int productoId)
    {
        facturacion.SubTotal += precio;
        facturacion.ITBS += itebis;
        facturacion.Total += precio + itebis;

        var detalleExistente = facturacion.FacturacionDetalle.FirstOrDefault(x => x.ProductoId == productoId);
        if (detalleExistente != null)
            detalleExistente.Cantidad += cantidad;
        else
            facturacion.FacturacionDetalle.Add(new FacturacionDetalle { ProductoId = productoId, Cantidad = cantidad });
    }

    void productoNoDisponibleNotification()
    {
        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "No hay suficiente cantidad de este producto",
                Duration = 5000
            };
        notificationService.Notify(mensaje);
    }

    public async Task RemoverProducto(Productos prod)
    {
        var producto = await productosService.GetObject(prod.ProductoId);
        var detalle = facturacion.FacturacionDetalle.FirstOrDefault(x => x.ProductoId == producto.ProductoId);

        if (detalle != null && producto != null)
        {
            double precioConDescuento = producto.Precio * detalle!.Cantidad * (1 - producto.Descuento / 100.0f);
            double itebis = precioConDescuento * (producto.ITBIS / 100.0f);

            facturacion.SubTotal -= precioConDescuento;
            facturacion.ITBS -= itebis;
            facturacion.Total -= precioConDescuento + itebis;
            facturacion.FacturacionDetalle.Remove(detalle);

            if (facturacion.SubTotal <= 0)
                facturacion.SubTotal = 0;
            if (facturacion.ITBS <= 0)
                facturacion.ITBS = 0;
            if (facturacion.Total <= 0)
                facturacion.Total = 0;
        }
    }

    public void AumentarCantidad(Productos prod)
    {
        prod.Cantidad++;
    }

    public void DisminuirCantidad(Productos prod)
    {
        if (prod.Cantidad > 1)
        {
            prod.Cantidad--;
        }
    }

    public void NuevaVenta()
    {
        facturacion = new Facturaciones();
        facturacion.FacturacionDetalle = new List<FacturacionDetalle>();
        facturacion.Fecha = DateTime.Now;
        input = new Input();
        input.FechaExpiracion = DateTime.Now;
    }

    public void CerrarVenta()
    {
        vender = false;
    }
    public void CerrarFactura()
    {
        factura = false;
        NuevaVenta();
    }

    public async Task RealizarVenta()
    {
        facturacion.Eliminada = false;
        if (ValidateFechaExpiracion(input.FechaExpiracion) != null && facturacion.MetodoPagoId == 2)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La fecha de expiración debe ser posterior a la fecha actual.",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            return;
        }
        if (!VerificarNombre(facturacion.NombreCliente!))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El Nombre No puede contener numeros ni estar vacio",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            return;
        }


        if (facturacion.MetodoPagoId == 1)
        {
            if (facturacion.Recibido < facturacion.Total)
            {
                var mensaje1 = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "El monto recibido no puede ser menor al total",
                        Duration = 5000
                    };
                notificationService.Notify(mensaje1);
                return;
            }

            await ActualizarCantidadProducto(facturacion.FacturacionDetalle);
            facturacion.Devuelta = facturacion.Recibido - facturacion.Total;
            vender = false;
            await facturacionesService.AddObject(facturacion);
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Venta Realizada",
                    Detail = "La venta se ha realizado con exito",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            factura = true;
        }
        else
        {

            await ActualizarCantidadProducto(facturacion.FacturacionDetalle);
            facturacion.Devuelta = 0;
            facturacion.Recibido = facturacion.Total;
            vender = false;
            await facturacionesService.AddObject(facturacion);
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Venta Realizada",
                    Detail = "La venta se ha realizado con exito",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            factura = true;
        }

    }

    private string ValidateFechaExpiracion(DateTime fecha)
    {
        if (fecha <= DateTime.Now)
        {
            return "La fecha de expiración debe ser posterior a la fecha actual.";
        }
        return null!;
    }
    public bool VerificarNombre(string str)
    {
        if (string.IsNullOrEmpty(str))
            return false;

        return Regex.IsMatch(str, @"^[a-zA-Z ]+$");
    }

    public async Task ImprimirFactura()
    {
        factura = false;
        await JSRuntime.InvokeVoidAsync("ImprimirF");
        await Task.Delay(500);
        NuevaVenta();
    }

    public string getLogo()
    {
        if (configuracion.Imagen != null && configuracion.Imagen.Length > 0)
        {
            string base64String = Convert.ToBase64String(configuracion.Imagen);
            return $"data:image/png;base64,{base64String}";
        }
        else
        {
            return "/default.png";
        }
    }

    public async Task ActualizarCantidadProducto(ICollection<FacturacionDetalle> detalle)
    {
        foreach (var item in detalle)
        {
            var producto = await productosService.GetObject(item.ProductoId);
            if (producto != null)
            {
                if (producto.Cantidad <= 0)
                    producto.EsDisponible = false;
                producto.Cantidad -= item.Cantidad;
                await productosService.UpdateObject(producto);
            }
        }
    }
}
